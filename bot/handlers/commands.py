import logging
from pyexpat.errors import messages

from telegram import Update
from telegram.ext import CommandHandler, ContextTypes
from config.settings import BOT
from bot.messages import messages
from utils.track_referral import track_referral
from bot.keyboards import keyboards
from service.apiService import ApiService
from bot.models.user import User


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from_user = update.message.from_user
    member = User(
        None,
        update.message.from_user.id,
        None,  # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å None –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        update.message.from_user.last_name,
        update.message.from_user.first_name,
        None,
        None,
        False,
        str(update.message.date)  # –∏–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è
    )

    args = context.args

    if 'start_count' not in context.user_data:
        context.user_data['start_count'] = 1
        await update.message.reply_text(messages.first_welcome_messege())

    if args and args[0].startswith('ref_'):
        referrer_id = args[0][4:]  # ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ

        member.referral_id = referrer_id
        print(member.to_dict())
        service = ApiService()

        await track_referral(update, context, referrer_id)

        await service.new_member(member.to_d())
    else:
        await update.message.reply_text(
            messages.start(),
            reply_markup=await keyboards.start(),
            parse_mode="Markdown"
        )


# async def greet_new_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
#     for member in update.message.new_chat_members:
#         await update.message.reply_text(
#             f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.mention_markdown()}!\n"
#             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–ø—ã."
#         )


async def get_referral_link(update: Update, context):
    user_id = update.effective_user.id
    ref_link = f"https://t.me/{BOT}?start=ref_{user_id}"

    await update.message.reply_text(
        messages.ref(ref_link),
        reply_markup=await keyboards.ref(ref_link),
        parse_mode="Markdown"
    )

    # async def process_referral(referrer_id: int, new_user_id: int):
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
    # –ü—Ä–∏–º–µ—Ä —Å SQLite –±–∞–∑–æ–π:
    # import sqlite3
    # conn = sqlite3.connect('bot.db')
    # cursor = conn.cursor()

    # # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ
    # cursor.execute(
    #     "INSERT OR IGNORE INTO referrals (referrer_id, referral_id) VALUES (?, ?)",
    #     (referrer_id, new_user_id)
    # )
    #
    # # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã
    # cursor.execute(
    #     "UPDATE users SET balance = balance + 100 WHERE user_id = ?",
    #     (referrer_id,)
    # )

    # conn.commit()
    # conn.close()

    # # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
    # await context.bot.send_message(
    #     chat_id=referrer_id,
    #     text="üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! +100 –±–∞–ª–ª–æ–≤!"
    # )


def setup_handlers_commands():
    return [
        CommandHandler("start", start),
        CommandHandler("ref", get_referral_link)
    ]
